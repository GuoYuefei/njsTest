{
  "_args": [
    [
      {
        "raw": "multer@2.0.0-alpha.3",
        "scope": null,
        "escapedName": "multer",
        "name": "multer",
        "rawSpec": "2.0.0-alpha.3",
        "spec": "2.0.0-alpha.3",
        "type": "version"
      },
      "C:\\Users\\Administrator\\workspace\\jstest1"
    ]
  ],
  "_from": "multer@2.0.0-alpha.3",
  "_id": "multer@2.0.0-alpha.3",
  "_inCache": true,
  "_location": "/multer",
  "_nodeVersion": "7.2.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/multer-2.0.0-alpha.3.tgz_1482428706514_0.295092438114807"
  },
  "_npmUser": {
    "name": "linusu",
    "email": "linus@folkdatorn.se"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "multer@2.0.0-alpha.3",
    "scope": null,
    "escapedName": "multer",
    "name": "multer",
    "rawSpec": "2.0.0-alpha.3",
    "spec": "2.0.0-alpha.3",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/multer/-/multer-2.0.0-alpha.3.tgz",
  "_shasum": "893b5f1f5afc81932fae33e8889386c3e3c55942",
  "_shrinkwrap": null,
  "_spec": "multer@2.0.0-alpha.3",
  "_where": "C:\\Users\\Administrator\\workspace\\jstest1",
  "bugs": {
    "url": "https://github.com/expressjs/multer/issues"
  },
  "contributors": [
    {
      "name": "Hage Yaapa",
      "email": "captain@hacksparrow.com",
      "url": "http://www.hacksparrow.com"
    },
    {
      "name": "Jaret Pfluger",
      "email": "https://github.com/jpfluger"
    },
    {
      "name": "Linus UnnebÃ¤ck",
      "email": "linus@folkdatorn.se"
    }
  ],
  "dependencies": {
    "append-field": "^1.0.0",
    "busboy": "^0.2.13",
    "fs-temp": "^1.1.1",
    "on-finished": "^2.3.0",
    "pify": "^2.3.0",
    "pump": "^1.0.1",
    "type-is": "^1.6.13"
  },
  "description": "Middleware for handling `multipart/form-data`.",
  "devDependencies": {
    "assert-rejects": "^0.1.0",
    "express": "^4.14.0",
    "form-data": "^2.1.0",
    "get-stream": "^2.3.1",
    "hasha": "^2.2.0",
    "mocha": "^3.1.0",
    "standard": "^8.3.0",
    "testdata-w3c-json-form": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "893b5f1f5afc81932fae33e8889386c3e3c55942",
    "tarball": "https://registry.npmjs.org/multer/-/multer-2.0.0-alpha.3.tgz"
  },
  "engines": {
    "node": ">= 0.12.0"
  },
  "files": [
    "LICENSE",
    "index.js",
    "lib/"
  ],
  "gitHead": "b1e5ea0cee8c8a1ada4058d8ce187c3ecb391951",
  "homepage": "https://github.com/expressjs/multer#readme",
  "keywords": [
    "form",
    "post",
    "multipart",
    "form-data",
    "formdata",
    "express",
    "middleware"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "hacksparrow",
      "email": "captain@hacksparrow.com"
    },
    {
      "name": "linusu",
      "email": "linus@folkdatorn.se"
    },
    {
      "name": "jpfluger",
      "email": "japes@aberlorn.com"
    }
  ],
  "name": "multer",
  "optionalDependencies": {},
  "readme": "# Multer [![Build Status](https://travis-ci.org/expressjs/multer.svg?branch=master)](https://travis-ci.org/expressjs/multer) [![NPM version](https://badge.fury.io/js/multer.svg)](https://badge.fury.io/js/multer) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\nMulter is a node.js middleware for handling `multipart/form-data`, which is primarily used for uploading files. It is written\non top of [busboy](https://github.com/mscdex/busboy) for maximum efficiency.\n\n**NOTE**: Multer will not process any form which is not multipart (`multipart/form-data`).\n\n## Installation\n\n```sh\nnpm install --save multer\n```\n\n## Usage\n\nMulter adds a `body` object and a `file` or `files` object to the `request` object. The `body` object contains the values of the text fields of the form, the `file` or `files` object contains the files uploaded via the form.\n\nBasic usage example:\n\n```javascript\nvar multer = require('multer')\nvar express = require('express')\n\nvar app = express()\nvar upload = multer()\n\napp.post('/profile', upload.single('avatar'), function (req, res, next) {\n  // req.file is the `avatar` file\n  // req.body will hold the text fields, if there were any\n})\n\napp.post('/photos/upload', upload.array('photos', 12), function (req, res, next) {\n  // req.files is array of `photos` files\n  // req.body will contain the text fields, if there were any\n})\n\nvar cpUpload = upload.fields([{ name: 'avatar', maxCount: 1 }, { name: 'gallery', maxCount: 8 }])\napp.post('/cool-profile', cpUpload, function (req, res, next) {\n  // req.files is an object (String -> Array) where fieldname is the key, and the value is array of files\n  //\n  // e.g.\n  //  req.files['avatar'][0] -> File\n  //  req.files['gallery'] -> Array\n  //\n  // req.body will contain the text fields, if there were any\n})\n```\n\nIn case you need to handle a text-only multipart form, you can use the `.none()` method, example:\n\n```javascript\nvar multer = require('multer')\nvar express = require('express')\n\nvar app = express()\nvar upload = multer()\n\napp.post('/profile', upload.none(), function (req, res, next) {\n  // req.body contains the text fields\n})\n```\n\n## API\n\n### File information\n\nEach file contains the following information:\n\nKey | Description\n--- | ---\n`fieldName` | Field name specified in the form\n`originalName` | Name of the file on the user's computer\n`size` | Size of the file in bytes\n`stream` | Stream of file\n\n### `multer(opts)`\n\nMulter accepts an options object, the following are the options that can be\npassed to Multer.\n\nKey      | Description\n-------- | -----------\n`limits` | Limits of the uploaded data [(full description)](#limits)\n\n#### `.single(fieldname)`\n\nAccept a single file with the name `fieldname`. The single file will be stored\nin `req.file`.\n\n#### `.array(fieldname[, maxCount])`\n\nAccept an array of files, all with the name `fieldname`. Optionally error out if\nmore than `maxCount` files are uploaded. The array of files will be stored in\n`req.files`.\n\n#### `.fields(fields)`\n\nAccept a mix of files, specified by `fields`. An object with arrays of files\nwill be stored in `req.files`.\n\n`fields` should be an array of objects with `name` and optionally a `maxCount`.\nExample:\n\n```javascript\n[\n  { name: 'avatar', maxCount: 1 },\n  { name: 'gallery', maxCount: 8 }\n]\n```\n\n#### `.none()`\n\nAccept only text fields. If any file upload is made, error with code\n\"LIMIT\\_UNEXPECTED\\_FILE\" will be issued. This is the same as doing `upload.fields([])`.\n\n#### `.any()`\n\nAccepts all files that comes over the wire. An array of files will be stored in\n`req.files`.\n\n**WARNING:** Make sure that you always handle the files that a user uploads.\nNever add multer as a global middleware since a malicious user could upload\nfiles to a route that you didn't anticipate. Only use this function on routes\nwhere you are handling the uploaded files.\n\n### `limits`\n\nAn object specifying the size limits of the following optional properties. Multer passes this object into busboy directly, and the details of the properties can be found on [busboy's page](https://github.com/mscdex/busboy#busboy-methods).\n\nThe following integer values are available:\n\nKey | Description | Default\n--- | --- | ---\n`fieldNameSize` | Max field name size | 100 bytes\n`fieldSize` | Max field value size | 1MB\n`fields` | Max number of non-file fields | Infinity\n`fileSize` | For multipart forms, the max file size (in bytes) | Infinity\n`files` | For multipart forms, the max number of file fields | Infinity\n`parts` | For multipart forms, the max number of parts (fields + files) | Infinity\n`headerPairs` | For multipart forms, the max number of header key=>value pairs to parse | 2000\n\nSpecifying the limits can help protect your site against denial of service (DoS) attacks.\n\n## Error handling\n\nWhen encountering an error, multer will delegate the error to express. You can\ndisplay a nice error page using [the standard express way](http://expressjs.com/guide/error-handling.html).\n\nIf you want to catch errors specifically from multer, you can call the\nmiddleware function by yourself.\n\n```javascript\nvar upload = multer().single('avatar')\n\napp.post('/profile', function (req, res) {\n  upload(req, res, function (err) {\n    if (err) {\n      // An error occurred when uploading\n      return\n    }\n\n    // Everything went fine\n  })\n})\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/multer.git"
  },
  "scripts": {
    "test": "standard && mocha"
  },
  "version": "2.0.0-alpha.3"
}
